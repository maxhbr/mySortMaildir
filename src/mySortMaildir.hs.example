#!/usr/bin/env runhaskell

import           Data.List
import           Data.Char
import           System.Directory
import           System.FilePath
import           System.FilePath.Posix

import           MySortMaildir

main = runMySortMaildir cfgs

--------------------------------------------------------------------------------
--  Mailbox dirs

mailbox0 = "/home/USER/Mail/tosort/"
mailbox1 = "/home/USER/Mail/mail/"

--------------------------------------------------------------------------------
--  Configs

cfgs =
  [ C { inbox = mailbox0 </> "INBOX"
      , rules = haskellR ++ openlabR }
  , C { inbox = mailbox1 </> "INBOX"
      , rules = haskellR ++ billingR ++ openlabR }
  , C { inbox = mailbox1 </> "Sent"
      , rules = haskellR ++ billingR ++ openlabR } ]

--------------------------------------------------------------------------------
--  Rule-sets

haskellR =
  [ R { name   = "haskell"
      , rule   = \m -> "haskell" `isInfixOf` map toLower (subject m)
      , action = MoveTo $ mailbox1 </> "Sort.Haskell" } ]
openlabR =
  [ R { name   = "OpenLab All"
      , rule   = isAnyInfix "alle@lists.openlab-augsburg.de"
      , action = MoveTo $ mailbox1 </> "OpenLab.All" }
  , R { name   = "OpenLab Other"
      , rule   = isAnyInfix "lists.openlab-augsburg.de"
      , action = MoveTo $ mailbox1 </> "OpenLab.Lists" }
  , R { name   = "OpenLab Other"
      , rule   = isAnyInfix "openlab-augsburg.de"
      , action = MoveTo $ mailbox1 </> "OpenLab.Other" } ]
billingR =
  [ R { name   = "amazon"
      , rule   = \m -> "amazon" `isInfixOf` map toLower (from m)
                    || isAnyInfix "amazon" m
      , action = MoveTo $ mailbox1 </> "Archive.Billing" } ]
defaultR =
  [ R { name   = "Default"
      , rule   = const True
      , action = MoveTo $ mailbox1 </> "Sort.Unknown" } ]
